

// Переменные 

/* 
Переменная это коробка, контейнер у которой есть имя, название. В которую можно что-то положить(любую информацию), а конкретно говоря, на техническом языке, присвоить какой-либо тип данных, согласно имени обратится к ней.
Для создания переменной  используют ключевое слово let.
Давайте создадим переменную, скорей всего правильно сказать обьявим.
*/

let first;

/* 
    Присвоим ей значение, с помощью оператора =
*/

first = 'Hello world'; 

/* 
    Чтоб обратится к ней используем её имя.
*/

console.log(first); // Hello world

/* 
    Мы так же можем перезаписывать нашу переменную столько раз, сколько захотим.
    Давайте перезапишем значение нашей переменной first и выведем  в кансоль, посмотрим результат.
*/

first = 1;
console.log(first); // 1

/* 
    Обьявлять переменные можно несколькими способами.Например:
*/

let user = "Sergey", age = 25, job = "Web";
console.log(user ); //Sergey
console.log(age); // 25
console.log(job ); //Web

let car = 'Mazda', 
      year = 2016,
      speed = 280;

console.log(car); //Mazda
console.log(year); // 2016
console.log(speed); //280

/* 
    Как видите всё работает, но нужно выбрать такой вариант, который больше читаем
*/

/* 
    Мы можем объявить переменные для хранения данных с помощью ключевых слов 
   let, const или  var .
*/

// ------------------------------------LET-------------------------------

/* 
    Переменные обьявленные с помощью ключевого слово ===let===.
    Мы можем перезаписывать значение сколько хотим, мы это уже расматривали выше, но мы не можем их переобъявлять с тем же именем, мы получим ошибку;
*/

// let firstName  = 'Oleg';
// let firstName = 'Yaroslav';

/* 
   Если мы откроем консоль, то увидим ошибку 
   "Uncaught SyntaxError: Identifier 'firstName' has already been declared"
   "идентификатор 'first Name' уже объявлен"
*/

/* 
    Ещё одно правило для let, мы не можем вызывать переменную до её обьявлении
*/

// console.log(ioi);
// let ioi = 21;

/*
    Получим ошибку:
    "Uncaught ReferenceError: Cannot access 'ioi' before initialization"
    "не удается получить доступ к 'ioi' до инициализации"
*/


/* 
    let обладает блочной областью видимости (блок кода в javascript обозначается фигурными скобками {})
*/

{
    let elem18 = 18;
    console.log(elem18); //18
}
// console.log(elem18);  //elem18 is not defined

/*
  Таким вот простым способом, мы создали блок кода
  Вот пример с циклом.
  Мы обьявляем переменную i и тем самым её значение хранится в цыкле, за пределами  блока кода {} , мы не можем к ней обратится; 
*/

let arr = [12, 13, 14, 15];
for (let i = 0; i < arr.length; i++) {
    console.log(i);  //0, 1, 2, 3, 4
}

// console.log(i); //i is not defined

/*
   Мы можем создать опять блок кода и обьявить её с таким же именем, повторюсь она будет видна только в этом блоке кода.
*/

{
    let i = 0;
    console.log(i); //0
}

// console.log(i);  i is not defined

/*
   Переменная let обладает блочной видимотью это может быть циклы, условия, функции и просто блок когда {};
*/





// ------------------------------------VAR-------------------------------

/*
   Это старый метод обьявлении переменной.  Для неё не существует блочной  области видимости.Область видимости для var,  является функция. Такие переменные доступны за пределами блока, мы это убедимся на примере, в нём сравним let и var.
*/

//var
if(true){
    var test = true;
}
console.log(test); //true

//let
if(true){
    let test2 = true;
}
// console.log(test2); //test2 is not defined

/*
    Расмотрим на примере цикла и увидим что переменная j нам доступна как и её значение за переделами цикла. 
*/

let arrNew = [12, 13, 14, 15];
for (var j = 0; j< arr.length; j++) {
    console.log(j);  //0, 1, 2, 3, 4
}

console.log(j);  //0, 1, 2, 3, 4


/*
    В отличии от let, мы можем обратится к переменной перед её обьялении  рельтат - undefined;
*/

console.log(yearNow); //undefined
var yearNow = 2020; 



// ------------------------------------CONST-------------------------------

/*
    Обьявление переменой через const аналогично let, только мы не можем изменять значения  самой перемнной, сколько захотим.Рассмотрим это на примере.
*/

// const sportCar = ' Ford Mustang';
// sportCar = 'Porsche-Taycan';

/* 
    в консоле браузера мы уже увидим ошибку 
    Uncaught TypeError: Assignment to constant variable.
    Присвоение постоянной переменной
*/


/*
    const мы используем для постоянных значении которые не изменяются
    Очень часто её используют для хранения элемента DOM.
*/

const button = document.querySelector('button');
const link = document.querySelector('.link');



/*
    Мы говорили что переменную обьявленную через const нельзя изменять и это верно, но если мы присвоили тип данных обьект, нашей константе, то  изменять  значение ключа обьекта можно. Рассмотрим на примере. Создадим обьект и поменяем значения ключа car.
*/

const agent = {
    name: 'Igor',
    age: 28,
    car: 'Mazda'
}

console.log(agent); // {name: "Igor", age: 28, car: "Mazda"}

agent.car = 'Ford';

console.log(agent); // {name: "Igor", age: 28, car: "Ford"}


// Имена переменных


/*
   Имя переменной должно содержать только буквы, цыфры символы $, _
*/
let $ = 90;
console.log($); //90

let _ = 99;
console.log(_); //99

/*
   Имя переменной не должно  начинаться с цифры, не должно содержать символ  "-" между названием перенной
*/

// let 2last = 2;  //Invalid or unexpected token
// let mari-ivanovna = "Мария Ивановна";  //Unexpected token '-'

/*
   Имя переменной нужно называть на английском языке. Можно использовать любой язык, включая кириллицу или даже иероглифы.
   Тут не будет ошибки ,но есть международная традиция использовать английский язык в именах переменных. 
*/

/* В названии переменной, регистр имеет значение */

let  iPhone;
let iphone;

/* Это две абсолютно разные переменные */
/* В наименовании переменной существует так называемый горбатый стиль CamelCase. Частным случаем стиля является         lowerCamelCase, когда с прописной буквы пишутся все слова, кроме первого.
*/

/* https://ru.wikipedia.org/wiki/CamelCase */

/* Переменные называть нужно так, чтоб другой разробочик с легкостью разобрался в вашем коде */

/* Резюме */

/* 
 ****  Соверменный способ, обьявления переменной через ключевое слово let, её область видимости является блочной.
 ****  Старый подход,  обьявления переменной через ключевое слово var, её область видимости - функция;
 ****  const тоже самое что и let, отличе в том что мы не можем переприсвоить значения переменной.
*/


/* Источники */
/* https://ru.wikipedia.org/wiki/CamelCase */
/* https://learn.javascript.ru/variables */

